{
  "address": "0x9246F2Ca979Ef55FcacB5C4D3F46D36399da760e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IDAOracle",
          "name": "_blobstreamX",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "beginKey",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endKey",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "min",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "max",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "digest",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct NamespaceNode[]",
                  "name": "sideNodes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct NamespaceMerkleMultiproof[]",
              "name": "shareProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes1",
                  "name": "version",
                  "type": "bytes1"
                },
                {
                  "internalType": "bytes28",
                  "name": "id",
                  "type": "bytes28"
                }
              ],
              "internalType": "struct Namespace",
              "name": "namespace",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "min",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "max",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "digest",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct NamespaceNode[]",
              "name": "rowRoots",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "sideNodes",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "key",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLeaves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BinaryMerkleProof[]",
              "name": "rowProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tupleRootNonce",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "height",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "dataRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct DataRootTuple",
                  "name": "tuple",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32[]",
                      "name": "sideNodes",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "key",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numLeaves",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BinaryMerkleProof",
                  "name": "proof",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AttestationProof",
              "name": "attestationProof",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharesProof",
          "name": "_proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_execLayerData",
          "type": "bytes"
        }
      ],
      "name": "relayShares",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e723f35fd3e0791615a9ddf2f47006583dc0d495570954309169a5e1490f130",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xF05D57a5BeD2d1B529C56001FC5810cc9afC0335",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "2852145",
    "logsBloom": "0x
    "blockHash": "0x7d043fd23509436d3341ca8ec844995b7721ee7f8cf9b5eb62d054f44e38971a",
    "transactionHash": "0x3e723f35fd3e0791615a9ddf2f47006583dc0d495570954309169a5e1490f130",
    "logs": [],
    "blockNumber": 11309991,
    "cumulativeGasUsed": "2991186",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58Df21fE097d4bE5dCf61e01d9ea3f6B81c2E1dB",
    "0xc3e209eb245Fd59c8586777b499d6A665DF3ABD2"
  ],
  "numDeployments": 3,
  "solcInputHash": "0fe2bc05fdef4a76c16739be6ee37dd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IDAOracle\",\"name\":\"_blobstreamX\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endKey\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"sideNodes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct NamespaceMerkleMultiproof[]\",\"name\":\"shareProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"namespace\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"rowRoots\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof[]\",\"name\":\"rowProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tupleRootNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataRootTuple\",\"name\":\"tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationProof\",\"name\":\"attestationProof\",\"type\":\"tuple\"}],\"internalType\":\"struct SharesProof\",\"name\":\"_proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_execLayerData\",\"type\":\"bytes\"}],\"name\":\"relayShares\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_blobstreamX\":\"BlobstreamX contract where Celestia commitments are being stored\",\"_inputBox\":\"InputBox contract to send inputs to Cartesi DApps\"}},\"relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32,bytes)\":{\"details\":\"Called by clients to securely relay Celestia data to Cartesi DApps\",\"params\":{\"_dapp\":\"The address of the DApp\",\"_execLayerData\":\"Additional data to be interpreted by the execution layer\",\"_proof\":\"SharesProof object showing that a range of shares is committed to Celestia\",\"_root\":\"The Celestia \\\"dataRoot\\\" with the commitment for the block that contains the shares\"},\"returns\":{\"_0\":\"The hash of the input as returned by the Cartesi DApp's input box\"}}},\"title\":\"CelestiaRelay\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32,bytes)\":{\"notice\":\"Relay the specified Celestia shares as an input to a DApp's input box\"}},\"notice\":\"Relays Celestia blocks as inputs to Cartesi DApps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CelestiaRelay.sol\":\"CelestiaRelay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@cartesi/rollups/contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Provides data availability of inputs for applications.\\n/// @notice Each application has its own append-only list of inputs.\\n/// @notice Off-chain, inputs can be retrieved via events.\\n/// @notice On-chain, only the input hashes are stored.\\n/// @notice See `LibInput` for more details on how such hashes are computed.\\ninterface IInputBox {\\n    /// @notice MUST trigger when an input is added.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @param input The input blob\\n    event InputAdded(\\n        address indexed appContract,\\n        uint256 indexed index,\\n        bytes input\\n    );\\n\\n    /// @notice Input is too large.\\n    /// @param appContract The application contract address\\n    /// @param inputLength The input length\\n    /// @param maxInputLength The maximum input length\\n    error InputTooLarge(\\n        address appContract,\\n        uint256 inputLength,\\n        uint256 maxInputLength\\n    );\\n\\n    /// @notice Send an input to an application.\\n    /// @param appContract The application contract address\\n    /// @param payload The input payload\\n    /// @return The hash of the input blob\\n    /// @dev MUST fire an `InputAdded` event.\\n    function addInput(\\n        address appContract,\\n        bytes calldata payload\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs sent to an application.\\n    /// @param appContract The application contract address\\n    function getNumberOfInputs(\\n        address appContract\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in an application's input box.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @dev The provided index must be valid.\\n    function getInputHash(\\n        address appContract,\\n        uint256 index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xae7730cd7ab2b31a86d7c4933215853ea6c0b1b4dc60d4ec24e5cfc2ec005fe3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"blobstream-contracts/src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @dev bytes32 encoding of the string \\\"checkpoint\\\"\\nbytes32 constant VALIDATOR_SET_HASH_DOMAIN_SEPARATOR =\\n    0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n/// @dev bytes32 encoding of the string \\\"transactionBatch\\\"\\nbytes32 constant DATA_ROOT_TUPLE_ROOT_DOMAIN_SEPARATOR =\\n    0x7472616e73616374696f6e426174636800000000000000000000000000000000;\\n\",\"keccak256\":\"0x0236491c1b01a038105ecfb270a39db52d7591f2200dbc1af079c4d8ed689f82\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/DataRootTuple.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A tuple of data root with metadata. Each data root is associated\\n///  with a Celestia block height.\\n/// @dev `availableDataRoot` in\\n///  https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#header\\nstruct DataRootTuple {\\n    // Celestia block height the data root was included in.\\n    // Genesis block is height = 0.\\n    // First queryable block is height = 1.\\n    uint256 height;\\n    // Data root.\\n    bytes32 dataRoot;\\n}\\n\",\"keccak256\":\"0x0526597d14a6d7f258ec48e434a9b60c9a8781764a8f23c878d49926daeb5d1c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/IDAOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./DataRootTuple.sol\\\";\\nimport \\\"./lib/tree/binary/BinaryMerkleProof.sol\\\";\\n\\n/// @notice Data Availability Oracle interface.\\ninterface IDAOracle {\\n    /// @notice Verify a Data Availability attestation.\\n    /// @param _tupleRootNonce Nonce of the tuple root to prove against.\\n    /// @param _tuple Data root tuple to prove inclusion of.\\n    /// @param _proof Binary Merkle tree proof that `tuple` is in the root at `_tupleRootNonce`.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    function verifyAttestation(uint256 _tupleRootNonce, DataRootTuple memory _tuple, BinaryMerkleProof memory _proof)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xc35648b17d3587bc3a627f67a328874db536ee24c11b970c3c57226d69a32eec\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary Constants {\\n    ///////////////\\n    // Constants //\\n    ///////////////\\n\\n    /// @dev Maximum tree height\\n    uint256 internal constant MAX_HEIGHT = 256;\\n\\n    /// @dev The prefixes of leaves and nodes\\n    bytes1 internal constant LEAF_PREFIX = 0x00;\\n    bytes1 internal constant NODE_PREFIX = 0x01;\\n}\\n\\n/// @dev Parity share namespace.\\n/// utility function to provide the parity share namespace as a Namespace struct.\\nfunction PARITY_SHARE_NAMESPACE() pure returns (Namespace memory) {\\n    return Namespace(0xFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n}\\n\",\"keccak256\":\"0x2050b2be8a739ce250cc5cea1556936c7937915b5d7fde269dd70e8e7eb660c4\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A representation of the Celestia-app namespace ID and its version.\\n/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html\\nstruct Namespace {\\n    // The namespace version.\\n    bytes1 version;\\n    // The namespace ID.\\n    bytes28 id;\\n}\\n\\nusing {equalTo, lessThan, greaterThan, toBytes} for Namespace global;\\n\\nfunction equalTo(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() == r.toBytes();\\n}\\n\\nfunction lessThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() < r.toBytes();\\n}\\n\\nfunction greaterThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() > r.toBytes();\\n}\\n\\nfunction toBytes(Namespace memory n) pure returns (bytes29) {\\n    return bytes29(abi.encodePacked(n.version, n.id));\\n}\\n\\nfunction toNamespace(bytes29 n) pure returns (Namespace memory) {\\n    bytes memory id = new bytes(28);\\n    for (uint256 i = 1; i < 29; i++) {\\n        id[i - 1] = n[i];\\n    }\\n    return Namespace(n[0], bytes28(id));\\n}\\n\",\"keccak256\":\"0xa47e9e20fef88264acdf1fc6bc0b3bb9f23c7022f5de8d203a1014895a606958\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Constants.sol\\\";\\n\\n/// @notice Calculate the starting bit of the path to a leaf\\n/// @param numLeaves : The total number of leaves in the tree\\n/// @return startingBit : The starting bit of the path\\n// solhint-disable-next-line func-visibility\\nfunction getStartingBit(uint256 numLeaves) pure returns (uint256 startingBit) {\\n    // Determine height of the left subtree. This is the maximum path length, so all paths start at this offset from the right-most bit\\n    startingBit = 0;\\n    while ((1 << startingBit) < numLeaves) {\\n        startingBit += 1;\\n    }\\n    return Constants.MAX_HEIGHT - startingBit;\\n}\\n\\n/// @notice Calculate the length of the path to a leaf\\n/// @param key: The key of the leaf\\n/// @param numLeaves: The total number of leaves in the tree\\n/// @return pathLength : The length of the path to the leaf\\n// solhint-disable-next-line func-visibility\\nfunction pathLengthFromKey(uint256 key, uint256 numLeaves) pure returns (uint256 pathLength) {\\n    if (numLeaves <= 1) {\\n        // if the number of leaves of the tree is 1 or 0, the path always is 0.\\n        return 0;\\n    }\\n    // Get the height of the left subtree. This is equal to the offset of the starting bit of the path\\n    pathLength = Constants.MAX_HEIGHT - getStartingBit(numLeaves);\\n\\n    // Determine the number of leaves in the left subtree\\n    uint256 numLeavesLeftSubTree = (1 << (pathLength - 1));\\n\\n    // If leaf is in left subtree, path length is full height of left subtree\\n    if (key <= numLeavesLeftSubTree - 1) {\\n        return pathLength;\\n    }\\n    // If left sub tree has only one leaf but key is not there, path has one additional step\\n    else if (numLeavesLeftSubTree == 1) {\\n        return 1;\\n    }\\n    // Otherwise, add 1 to height and recurse into right subtree\\n    else {\\n        return 1 + pathLengthFromKey(key - numLeavesLeftSubTree, numLeaves - numLeavesLeftSubTree);\\n    }\\n}\\n\\n/// @notice Returns the minimum number of bits required to represent `x`; the\\n/// result is 0 for `x` == 0.\\n/// @param x Number.\\nfunction _bitsLen(uint256 x) pure returns (uint256) {\\n    uint256 count = 0;\\n\\n    while (x != 0) {\\n        count++;\\n        x >>= 1;\\n    }\\n\\n    return count;\\n}\\n\\n/// @notice Returns the largest power of 2 less than `x`.\\n/// @param x Number.\\nfunction _getSplitPoint(uint256 x) pure returns (uint256) {\\n    // Note: since `x` is always an unsigned int * 2, the only way for this\\n    // to be violated is if the input == 0. Since the input is the end\\n    // index exclusive, an input of 0 is guaranteed to be invalid (it would\\n    // be a proof of inclusion of nothing, which is vacuous).\\n    require(x >= 1);\\n\\n    uint256 bitLen = _bitsLen(x);\\n    uint256 k = 1 << (bitLen - 1);\\n    if (k == x) {\\n        k >>= 1;\\n    }\\n    return k;\\n}\\n\",\"keccak256\":\"0x9760cb3ab3d4f412949b9be1bbdf5d9e7954cad44a94a4f7fe90fcffb86fe7fa\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice Merkle Tree Proof structure.\\nstruct BinaryMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    bytes32[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x9fb953284b455b544091f058fdb11ac73928093517333909c0744d9319410688\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\nimport \\\"./BinaryMerkleProof.sol\\\";\\n\\n/// @title Binary Merkle Tree.\\nlibrary BinaryMerkleTree {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The provided side nodes count is invalid for the proof.\\n        InvalidNumberOfSideNodes,\\n        /// @notice The provided proof key is not part of the tree.\\n        KeyNotInTree,\\n        /// @notice Invalid number of leaves in proof.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The proof contains unexpected side nodes.\\n        UnexpectedInnerHashes,\\n        /// @notice The proof verification expected at least one inner hash.\\n        ExpectedAtLeastOneInnerHash\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which verify the given leaf.\\n    /// @param proof Binary Merkle proof for the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(bytes32 root, BinaryMerkleProof memory proof, bytes memory data)\\n        internal\\n        pure\\n        returns (bool, ErrorCodes)\\n    {\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n            }\\n        } else if (proof.sideNodes.length != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return (false, ErrorCodes.KeyNotInTree);\\n        }\\n\\n        // A sibling at height 1 is created by getting the hash of the data to prove.\\n        bytes32 digest = leafDigest(data);\\n\\n        // Null proof is only valid if numLeaves = 1\\n        // If so, just verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return (root == digest, ErrorCodes.NoError);\\n            } else {\\n                return (false, ErrorCodes.NoError);\\n            }\\n        }\\n\\n        (bytes32 computedHash, ErrorCodes error) = computeRootHash(proof.key, proof.numLeaves, digest, proof.sideNodes);\\n\\n        if (error != ErrorCodes.NoError) {\\n            return (false, error);\\n        }\\n\\n        return (computedHash == root, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Use the leafHash and innerHashes to get the root merkle hash.\\n    /// If the length of the innerHashes slice isn't exactly correct, the result is nil.\\n    /// Recursive impl.\\n    function computeRootHash(uint256 key, uint256 numLeaves, bytes32 leafHash, bytes32[] memory sideNodes)\\n        private\\n        pure\\n        returns (bytes32, ErrorCodes)\\n    {\\n        if (numLeaves == 0) {\\n            return (leafHash, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        if (numLeaves == 1) {\\n            if (sideNodes.length != 0) {\\n                return (leafHash, ErrorCodes.UnexpectedInnerHashes);\\n            }\\n            return (leafHash, ErrorCodes.NoError);\\n        }\\n        if (sideNodes.length == 0) {\\n            return (leafHash, ErrorCodes.ExpectedAtLeastOneInnerHash);\\n        }\\n        uint256 numLeft = _getSplitPoint(numLeaves);\\n        bytes32[] memory sideNodesLeft = slice(sideNodes, 0, sideNodes.length - 1);\\n        ErrorCodes error;\\n        if (key < numLeft) {\\n            bytes32 leftHash;\\n            (leftHash, error) = computeRootHash(key, numLeft, leafHash, sideNodesLeft);\\n            if (error != ErrorCodes.NoError) {\\n                return (leafHash, error);\\n            }\\n            return (nodeDigest(leftHash, sideNodes[sideNodes.length - 1]), ErrorCodes.NoError);\\n        }\\n        bytes32 rightHash;\\n        (rightHash, error) = computeRootHash(key - numLeft, numLeaves - numLeft, leafHash, sideNodesLeft);\\n        if (error != ErrorCodes.NoError) {\\n            return (leafHash, error);\\n        }\\n        return (nodeDigest(sideNodes[sideNodes.length - 1], rightHash), ErrorCodes.NoError);\\n    }\\n\\n    /// @notice creates a slice of bytes32 from the data slice of bytes32 containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes32[] memory _data, uint256 _begin, uint256 _end) internal pure returns (bytes32[] memory) {\\n        if (_begin > _end) {\\n            revert(\\\"Invalid range: _begin is greater than _end\\\");\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            revert(\\\"Invalid range: _begin or _end are out of bounds\\\");\\n        }\\n        bytes32[] memory out = new bytes32[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return out;\\n    }\\n}\\n\",\"keccak256\":\"0x90dc9ac613014c2d3fcebbd23f2b5af67188b7de80b2ef853f20c91a14ce68fd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\n\\n/// @notice Calculate the digest of a node.\\n/// @param left The left child.\\n/// @param right The right child.\\n/// @return digest The node digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(bytes32 left, bytes32 right) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.NODE_PREFIX, left, right));\\n}\\n\\n/// @notice Calculate the digest of a leaf.\\n/// @param data The data of the leaf.\\n/// @return digest The leaf digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(bytes memory data) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, data));\\n}\\n\",\"keccak256\":\"0x2f16501eac14f6e2a61de29d3aa10e3aaf8e0a594fc9cf8dc2d955bb2f6d54e0\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleMultiproof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Multiproof structure. Proves multiple leaves.\\nstruct NamespaceMerkleMultiproof {\\n    // The beginning key of the leaves to verify.\\n    uint256 beginKey;\\n    // The ending key of the leaves to verify.\\n    uint256 endKey;\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n}\\n\",\"keccak256\":\"0x6ae0f3e8413808e06b570202a27a08e3f1236add1b00b5cb4b4ac17049e1960c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Proof structure.\\nstruct NamespaceMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x52eef9f87e34c11d6f8eda6f4a508b420c0193430c4035f49088069b6217ab40\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./NamespaceMerkleProof.sol\\\";\\nimport \\\"./NamespaceMerkleMultiproof.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\n\\n/// @title Namespace Merkle Tree.\\nlibrary NamespaceMerkleTree {\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// @param namespace Namespace of the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        Namespace memory namespace,\\n        bytes memory data\\n    ) internal pure returns (bool) {\\n        // A sibling at height 1 is created by getting the leafDigest of the original data.\\n        NamespaceNode memory node = leafDigest(namespace, data);\\n\\n        // Since we're verifying a leaf, height parameter is 1.\\n        return verifyInner(root, proof, node, 1);\\n    }\\n\\n    /// @notice Verify if inner node exists in Merkle tree, given node, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// proof.key is any key in the subtree rooted at the inner node.\\n    /// @param node The inner node to verify.\\n    /// @param startingHeight Starting height of the proof.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verifyInner(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        NamespaceNode memory node,\\n        uint256 startingHeight\\n    ) internal pure returns (bool) {\\n        // Check starting height is at least 1\\n        if (startingHeight < 1) {\\n            return false;\\n        }\\n        uint256 heightOffset = startingHeight - 1;\\n\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return false;\\n            }\\n        } else if (proof.sideNodes.length + heightOffset != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return false;\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return false;\\n        }\\n        // Handle case where proof is empty: i.e, only one leaf exists, so verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return namespaceNodeEquals(root, node);\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        // The case where inner node is actually the root of a tree with more than one node is not relevant\\n        // to our use case, since the only case where an inner node is the root of the tree is when the tree\\n        // has only one inner node. So, there is no need to handle that case.\\n\\n        uint256 height = startingHeight;\\n        uint256 stableEnd = proof.key;\\n\\n        // While the current subtree (of height 'height') is complete, determine\\n        // the position of the next sibling using the complete subtree algorithm.\\n        // 'stableEnd' tells us the ending index of the last full subtree. It gets\\n        // initialized to 'key' because the first full subtree was the\\n        // subtree of height 1, created above (and had an ending index of\\n        // 'key').\\n\\n        while (true) {\\n            // Determine if the subtree is complete. This is accomplished by\\n            // rounding down the key to the nearest 1 << 'height', adding 1\\n            // << 'height', and comparing the result to the number of leaves in the\\n            // Merkle tree.\\n\\n            uint256 subTreeStartIndex = (proof.key / (1 << height)) * (1 << height);\\n            uint256 subTreeEndIndex = subTreeStartIndex + (1 << height) - 1;\\n\\n            // If the Merkle tree does not have a leaf at index\\n            // 'subTreeEndIndex', then the subtree of the current height is not\\n            // a complete subtree.\\n            if (subTreeEndIndex >= proof.numLeaves) {\\n                break;\\n            }\\n            stableEnd = subTreeEndIndex;\\n\\n            // Determine if the key is in the first or the second half of\\n            // the subtree.\\n            if (proof.sideNodes.length + heightOffset <= height - 1) {\\n                return false;\\n            }\\n            if (proof.key - subTreeStartIndex < (1 << (height - 1))) {\\n                node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            } else {\\n                node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            }\\n\\n            height += 1;\\n        }\\n\\n        // Determine if the next hash belongs to an orphan that was elevated. This\\n        // is the case IFF 'stableEnd' (the last index of the largest full subtree)\\n        // is equal to the number of leaves in the Merkle tree.\\n        if (stableEnd != proof.numLeaves - 1) {\\n            if (proof.sideNodes.length <= height - heightOffset - 1) {\\n                return false;\\n            }\\n            node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            height += 1;\\n        }\\n        // All remaining elements in the proof set will belong to a left sibling.\\n        while (height - heightOffset - 1 < proof.sideNodes.length) {\\n            node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            height += 1;\\n        }\\n\\n        return namespaceNodeEquals(root, node);\\n    }\\n\\n    /// @notice Verify if contiguous elements exists in Merkle tree, given leaves, mutliproof, and root.\\n    /// @param root The root of the tree in which the given leaves are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param namespace Namespace of the leaves. All leaves must have the same namespace.\\n    /// @param data The leaves to verify. Note: leaf data must be the _entire_ share (including namespace prefixing).\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMulti(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        Namespace memory namespace,\\n        bytes[] memory data\\n    ) internal pure returns (bool) {\\n        // Hash all the leaves to get leaf nodes.\\n        NamespaceNode[] memory nodes = new NamespaceNode[](data.length);\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            nodes[i] = leafDigest(namespace, data[i]);\\n        }\\n\\n        // Verify inclusion of leaf nodes.\\n        return verifyMultiHashes(root, proof, nodes);\\n    }\\n\\n    /// @notice Verify if contiguous leaf hashes exists in Merkle tree, given leaf nodes, multiproof, and root.\\n    /// @param root The root of the tree in which the given leaf nodes are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes The leaf nodes to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMultiHashes(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes\\n    ) internal pure returns (bool) {\\n        uint256 leafIndex = 0;\\n        NamespaceNode[] memory leftSubtrees = new NamespaceNode[](proof.sideNodes.length);\\n\\n        for (uint256 i = 0; leafIndex != proof.beginKey && i < proof.sideNodes.length; ++i) {\\n            uint256 subtreeSize = _nextSubtreeSize(leafIndex, proof.beginKey);\\n            leftSubtrees[i] = proof.sideNodes[i];\\n            leafIndex += subtreeSize;\\n        }\\n\\n        // estimate the leaf size of the subtree containing the proof range\\n        uint256 proofRangeSubtreeEstimate = _getSplitPoint(proof.endKey) * 2;\\n        if (proofRangeSubtreeEstimate < 1) {\\n            proofRangeSubtreeEstimate = 1;\\n        }\\n\\n        (NamespaceNode memory rootHash, uint256 proofHead,,) =\\n            _computeRoot(proof, leafNodes, 0, proofRangeSubtreeEstimate, 0, 0);\\n        for (uint256 i = proofHead; i < proof.sideNodes.length; ++i) {\\n            rootHash = nodeDigest(rootHash, proof.sideNodes[i]);\\n        }\\n\\n        return namespaceNodeEquals(rootHash, root);\\n    }\\n\\n    /// @notice Returns the size of the subtree adjacent to `begin` that does\\n    /// not overlap `end`.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    function _nextSubtreeSize(uint256 begin, uint256 end) private pure returns (uint256) {\\n        uint256 ideal = _bitsTrailingZeroes(begin);\\n        uint256 max = _bitsLen(end - begin) - 1;\\n        if (ideal > max) {\\n            return 1 << max;\\n        }\\n        return 1 << ideal;\\n    }\\n\\n    /// @notice Returns the number of trailing zero bits in `x`; the result is\\n    /// 256 for `x` == 0.\\n    /// @param x Number.\\n    function _bitsTrailingZeroes(uint256 x) private pure returns (uint256) {\\n        uint256 mask = 1;\\n        uint256 count = 0;\\n\\n        while (x != 0 && mask & x == 0) {\\n            count++;\\n            x >>= 1;\\n        }\\n\\n        return count;\\n    }\\n\\n    /// @notice Computes the NMT root recursively.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes Leaf nodes for which inclusion is proven.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    /// @param headProof Internal detail: head of proof sidenodes array. Used for recursion. Set to `0` on first call.\\n    /// @param headLeaves Internal detail: head of leaves array. Used for recursion. Set to `0` on first call.\\n    /// @return _ Subtree root.\\n    /// @return _ New proof sidenodes array head. Used for recursion.\\n    /// @return _ New leaves array head. Used for recursion.\\n    /// @return _ If the subtree root is \\\"nil.\\\"\\n    function _computeRoot(\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes,\\n        uint256 begin,\\n        uint256 end,\\n        uint256 headProof,\\n        uint256 headLeaves\\n    ) private pure returns (NamespaceNode memory, uint256, uint256, bool) {\\n        // reached a leaf\\n        if (end - begin == 1) {\\n            // if current range overlaps with proof range, pop and return a leaf\\n            if (proof.beginKey <= begin && begin < proof.endKey) {\\n                // Note: second return value is guaranteed to be `false` by\\n                // construction.\\n                return _popLeavesIfNonEmpty(leafNodes, headLeaves, leafNodes.length, headProof);\\n            }\\n\\n            // if current range does not overlap with proof range,\\n            // pop and return a proof node (leaf) if present,\\n            // else return nil because leaf doesn't exist\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // if current range does not overlap with proof range,\\n        // pop and return a proof node if present,\\n        // else return nil because subtree doesn't exist\\n        if (end <= proof.beginKey || begin >= proof.endKey) {\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // Recursively get left and right subtree\\n        uint256 k = _getSplitPoint(end - begin);\\n        (NamespaceNode memory left, uint256 newHeadProofLeft, uint256 newHeadLeavesLeft,) =\\n            _computeRoot(proof, leafNodes, begin, begin + k, headProof, headLeaves);\\n        (NamespaceNode memory right, uint256 newHeadProof, uint256 newHeadLeaves, bool rightIsNil) =\\n            _computeRoot(proof, leafNodes, begin + k, end, newHeadProofLeft, newHeadLeavesLeft);\\n\\n        // only right leaf/subtree can be non-existent\\n        if (rightIsNil == true) {\\n            return (left, newHeadProof, newHeadLeaves, false);\\n        }\\n        NamespaceNode memory hash = nodeDigest(left, right);\\n        return (hash, newHeadProof, newHeadLeaves, false);\\n    }\\n\\n    /// @notice Pop from the leaf nodes array slice if it's not empty.\\n    /// @param nodes Entire leaf nodes array.\\n    /// @param headLeaves Head of leaf nodes array slice.\\n    /// @param end End of leaf nodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ New head of leaf nodes array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popLeavesIfNonEmpty(NamespaceNode[] memory nodes, uint256 headLeaves, uint256 end, uint256 headProof)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headLeaves, end);\\n        return (node, headProof, newHead, isNil);\\n    }\\n\\n    /// @notice Pop from the proof sidenodes array slice if it's not empty.\\n    /// @param nodes Entire proof sidenodes array.\\n    /// @param headLeaves Head of proof sidenodes array slice.\\n    /// @param end End of proof sidenodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ New head of proof sidenodes array slice.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popProofIfNonEmpty(NamespaceNode[] memory nodes, uint256 headProof, uint256 end, uint256 headLeaves)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headProof, end);\\n        return (node, newHead, headLeaves, isNil);\\n    }\\n\\n    /// @notice Pop from an array slice if it's not empty.\\n    /// @param nodes Entire array.\\n    /// @param head Head of array slice.\\n    /// @param end End of array slice.\\n    /// @return _ Popped node.\\n    /// @return _ New head of array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popIfNonEmpty(NamespaceNode[] memory nodes, uint256 head, uint256 end)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, bool)\\n    {\\n        if (nodes.length == 0 || head >= nodes.length || head >= end) {\\n            NamespaceNode memory node;\\n            return (node, head, true);\\n        }\\n        return (nodes[head], head + 1, false);\\n    }\\n}\\n\",\"keccak256\":\"0xe893ae809f062ad1b77e4e3382f6f34fd78d7dffb55853cfc47b0ffd2d56d590\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceNode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Types.sol\\\";\\n\\n/// @notice Namespace Merkle Tree node.\\nstruct NamespaceNode {\\n    // Minimum namespace.\\n    Namespace min;\\n    // Maximum namespace.\\n    Namespace max;\\n    // Node value.\\n    bytes32 digest;\\n}\\n\\n/// @notice Compares two `NamespaceNode`s.\\n/// @param first First node.\\n/// @param second Second node.\\n/// @return `true` is equal, `false otherwise.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceNodeEquals(NamespaceNode memory first, NamespaceNode memory second) pure returns (bool) {\\n    return first.min.equalTo(second.min) && first.max.equalTo(second.max) && (first.digest == second.digest);\\n}\\n\",\"keccak256\":\"0xdffc1a51e6dbe88cbe1b89f947290b93070b4e4094fbb412d157c0862a2cee55\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Get the minimum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMin(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.lessThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Get the maximum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMax(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.greaterThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Hash a leaf node.\\n/// @param namespace Namespace of the leaf.\\n/// @param data Raw data of the leaf.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(Namespace memory namespace, bytes memory data) pure returns (NamespaceNode memory) {\\n    bytes32 digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, namespace.toBytes(), data));\\n    NamespaceNode memory node = NamespaceNode(namespace, namespace, digest);\\n    return node;\\n}\\n\\n/// @notice Hash an internal node.\\n/// @param l Left child.\\n/// @param r Right child.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(NamespaceNode memory l, NamespaceNode memory r) pure returns (NamespaceNode memory) {\\n    Namespace memory min = namespaceMin(l.min, r.min);\\n    Namespace memory max;\\n    if (l.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = PARITY_SHARE_NAMESPACE();\\n    } else if (r.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = l.max;\\n    } else {\\n        max = namespaceMax(l.max, r.max);\\n    }\\n\\n    bytes32 digest = sha256(\\n        abi.encodePacked(\\n            Constants.NODE_PREFIX,\\n            l.min.toBytes(),\\n            l.max.toBytes(),\\n            l.digest,\\n            r.min.toBytes(),\\n            r.max.toBytes(),\\n            r.digest\\n        )\\n    );\\n\\n    NamespaceNode memory node = NamespaceNode(min, max, digest);\\n    return node;\\n}\\n\",\"keccak256\":\"0x068b2ef59d4b63bbc495494e21bd95371af0e8bac3ae38b739d8cfe4df6722cd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/verifier/DAVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../../Constants.sol\\\";\\nimport \\\"../../DataRootTuple.sol\\\";\\nimport \\\"../../IDAOracle.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleProof.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleTree.sol\\\";\\nimport \\\"../tree/namespace/NamespaceMerkleTree.sol\\\";\\nimport \\\"../tree/Types.sol\\\";\\n\\n/// @notice Contains the necessary parameters to prove that some shares, which were posted to\\n/// the Celestia network, were committed to by the Blobstream smart contract.\\nstruct SharesProof {\\n    // The shares that were committed to.\\n    bytes[] data;\\n    // The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.\\n    NamespaceMerkleMultiproof[] shareProofs;\\n    // The namespace of the shares.\\n    Namespace namespace;\\n    // The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.\\n    NamespaceNode[] rowRoots;\\n    // The proofs of the rowRoots to the data root.\\n    BinaryMerkleProof[] rowProofs;\\n    // The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.\\n    AttestationProof attestationProof;\\n}\\n\\n/// @notice Contains the necessary parameters needed to verify that a data root tuple\\n/// was committed to, by the Blobstream smart contract, at some specif nonce.\\nstruct AttestationProof {\\n    // the attestation nonce that commits to the data root tuple.\\n    uint256 tupleRootNonce;\\n    // the data root tuple that was committed to.\\n    DataRootTuple tuple;\\n    // the binary merkle proof of the tuple to the commitment.\\n    BinaryMerkleProof proof;\\n}\\n\\n/// @title DAVerifier: Celestia -> EVM, Data Availability verifier.\\n/// @dev The DAVerifier verifies that some shares, which were posted on Celestia, were committed to\\n/// by the Blobstream smart contract.\\nlibrary DAVerifier {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The shares to the rows proof is invalid.\\n        InvalidSharesToRowsProof,\\n        /// @notice The rows to the data root proof is invalid.\\n        InvalidRowsToDataRootProof,\\n        /// @notice The row to the data root proof is invalid.\\n        InvalidRowToDataRootProof,\\n        /// @notice The data root tuple to the data root tuple roof proof is invalid.\\n        InvalidDataRootTupleToDataRootTupleRootProof,\\n        /// @notice The number of share proofs isn't equal to the number of rows roots.\\n        UnequalShareProofsAndRowRootsNumber,\\n        /// @notice The number of rows proofs isn't equal to the number of rows roots.\\n        UnequalRowProofsAndRowRootsNumber,\\n        /// @notice The verifier data length isn't equal to the number of shares in the shares proofs.\\n        UnequalDataLengthAndNumberOfSharesProofs,\\n        /// @notice The number of leaves in the binary merkle proof is not divisible by 4.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The provided range is invalid.\\n        InvalidRange,\\n        /// @notice The provided range is out of bounds.\\n        OutOfBoundsRange\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verifies that the shares, which were posted to Celestia, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _sharesProof The proof of the shares to the data root tuple root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRoot(IDAOracle _bridge, SharesProof memory _sharesProof, bytes32 _root)\\n        internal\\n        view\\n        returns (bool, ErrorCodes)\\n    {\\n        // checking that the data root was committed to by the Blobstream smart contract.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRoot(\\n            _bridge, _sharesProof.rowRoots, _sharesProof.rowProofs, _sharesProof.attestationProof, _root\\n        );\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifySharesToDataRootTupleRootProof(\\n            _sharesProof.data,\\n            _sharesProof.shareProofs,\\n            _sharesProof.namespace,\\n            _sharesProof.rowRoots,\\n            _sharesProof.rowProofs,\\n            _root\\n        );\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the shares to data root tuple root proof.\\n    /// @param _data The data that needs to proven.\\n    /// @param _shareProofs The share to the row roots proof.\\n    /// @param _namespace The namespace of the shares.\\n    /// @param _rowRoots The row roots where the shares belong.\\n    /// @param _rowProofs The proofs of the rowRoots to the data root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRootProof(\\n        bytes[] memory _data,\\n        NamespaceMerkleMultiproof[] memory _shareProofs,\\n        Namespace memory _namespace,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // verifying the row root to data root tuple root proof.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        // checking that the shares were committed to by the rows roots.\\n        if (_shareProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalShareProofsAndRowRootsNumber);\\n        }\\n\\n        uint256 numberOfSharesInProofs = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            numberOfSharesInProofs += _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n        }\\n\\n        if (_data.length != numberOfSharesInProofs) {\\n            return (false, ErrorCodes.UnequalDataLengthAndNumberOfSharesProofs);\\n        }\\n\\n        uint256 cursor = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            uint256 sharesUsed = _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n            (bytes[] memory s, ErrorCodes err) = slice(_data, cursor, cursor + sharesUsed);\\n            if (err != ErrorCodes.NoError) {\\n                return (false, err);\\n            }\\n            if (!NamespaceMerkleTree.verifyMulti(_rowRoots[i], _shareProofs[i], _namespace, s)) {\\n                return (false, ErrorCodes.InvalidSharesToRowsProof);\\n            }\\n            cursor += sharesUsed;\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a row/column root, from a Celestia block, was committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifyRowRootToDataRootTupleRootProof(_rowRoot, _rowProof, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies that a row/column root proof, from a Celestia block, to the data root tuple root.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRootProof(\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        bytes memory rowRoot = abi.encodePacked(_rowRoot.min.toBytes(), _rowRoot.max.toBytes(), _rowRoot.digest);\\n        (bool valid,) = BinaryMerkleTree.verify(_root, _rowProof, rowRoot);\\n        if (!valid) {\\n            return (false, ErrorCodes.InvalidRowToDataRootProof);\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a set of rows/columns, from a Celestia block, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        // checking that the rows roots commit to the data root.\\n        (bool valid, ErrorCodes error) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the proof a set of rows/columns, from a Celestia block, to their corresponding data root.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRootProof(\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // checking that the rows roots commit to the data root.\\n        if (_rowProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalRowProofsAndRowRootsNumber);\\n        }\\n\\n        for (uint256 i = 0; i < _rowProofs.length; i++) {\\n            bytes memory rowRoot =\\n                abi.encodePacked(_rowRoots[i].min.toBytes(), _rowRoots[i].max.toBytes(), _rowRoots[i].digest);\\n            (bool valid,) = BinaryMerkleTree.verify(_root, _rowProofs[i], rowRoot);\\n            if (!valid) {\\n                return (false, ErrorCodes.InvalidRowsToDataRootProof);\\n            }\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a row/column root to data root binary merkle proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and was successfully committed to using\\n    //  the `DAVerifier.verifyRowRootToDataRootTupleRoot()` method\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof to have number of leaves equal to 0.\\n    /// @param _proof The proof of the row/column root to the data root.\\n    /// @return The square size of the corresponding block.\\n    /// @return an error code if the _proof is invalid, Errors.NoError otherwise.\\n    function computeSquareSizeFromRowProof(BinaryMerkleProof memory _proof)\\n        internal\\n        pure\\n        returns (uint256, ErrorCodes)\\n    {\\n        if (_proof.numLeaves % 4 != 0) {\\n            return (0, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        // we divide the number of leaves of the proof by 4 because the rows/columns tree is constructed\\n        // from the extended block row roots and column roots.\\n        return (_proof.numLeaves / 4, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a shares to row/column root proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and that the shares were successfully committed to using\\n    /// the `DAVerifier.verifySharesToDataRootTupleRoot()` method.\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof not to contain any side node.\\n    /// @param _proof The proof of the shares to the row/column root.\\n    /// @return The square size of the corresponding block.\\n    function computeSquareSizeFromShareProof(NamespaceMerkleMultiproof memory _proof) internal pure returns (uint256) {\\n        uint256 extendedSquareRowSize = 2 ** _proof.sideNodes.length;\\n        // we divide the extended square row size by 2 because the square size is the\\n        // the size of the row of the original square size.\\n        return extendedSquareRowSize / 2;\\n    }\\n\\n    /// @notice creates a slice of bytes from the data slice of bytes containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes[] memory _data, uint256 _begin, uint256 _end)\\n        internal\\n        pure\\n        returns (bytes[] memory, ErrorCodes)\\n    {\\n        if (_begin > _end) {\\n            return (_data, ErrorCodes.InvalidRange);\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            return (_data, ErrorCodes.OutOfBoundsRange);\\n        }\\n        bytes[] memory out = new bytes[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return (out, ErrorCodes.NoError);\\n    }\\n}\\n\",\"keccak256\":\"0x7015893047e509bfe8637df5ce17e658998259aa709d0e653358f774a77e9e7b\",\"license\":\"Apache-2.0\"},\"contracts/CelestiaRelay.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {IInputBox} from \\\"@cartesi/rollups/contracts/inputs/IInputBox.sol\\\";\\nimport \\\"../blobstream-contracts/src/IDAOracle.sol\\\";\\nimport \\\"../blobstream-contracts/src/lib/verifier/DAVerifier.sol\\\";\\n\\n\\n/// @title CelestiaRelay\\n/// @notice Relays Celestia blocks as inputs to Cartesi DApps\\ncontract CelestiaRelay {\\n\\n    IInputBox internal inputBox;\\n    IDAOracle internal blobstreamX;\\n\\n    /// @notice Constructor\\n    /// @param _inputBox InputBox contract to send inputs to Cartesi DApps\\n    /// @param _blobstreamX BlobstreamX contract where Celestia commitments are being stored\\n    constructor(IInputBox _inputBox, IDAOracle _blobstreamX) {\\n        inputBox = _inputBox;\\n        blobstreamX = _blobstreamX;\\n    }\\n\\n    /// @notice Relay the specified Celestia shares as an input to a DApp's input box\\n    /// @dev Called by clients to securely relay Celestia data to Cartesi DApps\\n    /// @param _dapp The address of the DApp\\n    /// @param _proof SharesProof object showing that a range of shares is committed to Celestia\\n    /// @param _root The Celestia \\\"dataRoot\\\" with the commitment for the block that contains the shares\\n    /// @param _execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The hash of the input as returned by the Cartesi DApp's input box\\n    function relayShares(\\n        address _dapp,\\n        SharesProof memory _proof,\\n        bytes32 _root,\\n        bytes calldata _execLayerData\\n    ) external returns (bytes32)\\n    {\\n        // verify if shares are committed to the Celestia Blobstream contract\\n        (bool verified, DAVerifier.ErrorCodes errorCode) =\\n            DAVerifier.verifySharesToDataRootTupleRoot(\\n                blobstreamX,\\n                _proof,\\n                _root\\n            );\\n        require(verified, \\\"Shares not committed to Celestia BlobstreamX contract\\\");\\n\\n        // relay data as Cartesi DApp input\\n        // input payload corresponds to the ABI encoding of the following fields:\\n        // - namespace: Celestia identifier for the DApp (29 bytes)\\n        // - dataRoot: commitment for the Celestia block that contains the relayed data (32 bytes)\\n        // - blockHeight: height of the Celestia block that contains the relayed data (32 bytes)\\n        // - start: index of the initial \\\"share\\\" (chunk) for the relayed data within the given Celestia block (32 bytes)\\n        // - end: index of the final \\\"share\\\" (chunk) for the relayed data within the given Celestia block (32 bytes)\\n        // - execLayerData: arbitrary additional data to be interpreted by the DApp code\\n        Namespace memory namespace = _proof.namespace;\\n        bytes32 dataRoot = _proof.attestationProof.tuple.dataRoot;\\n        uint256 blockHeight = _proof.attestationProof.tuple.height;\\n        uint256 start = _proof.shareProofs[0].beginKey;\\n        uint256 end = _proof.shareProofs[_proof.shareProofs.length-1].endKey;\\n        return inputBox.addInput(_dapp, abi.encode(namespace, dataRoot, blockHeight, start, end, _execLayerData));\\n    }\\n}\\n\",\"keccak256\":\"0xed8f7403a7690ab4b912c3118002f1c2c8edc8c00d5379386e6bedb8e1d91580\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346100305761001a610014610146565b9061021e565b610022610035565b613189610237823961318990f35b61003b565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061006a90610040565b810190811060018060401b0382111761008257604052565b61004a565b9061009a610093610035565b9283610060565b565b600080fd5b60018060a01b031690565b6100b5906100a1565b90565b6100c1906100ac565b90565b6100cd816100b8565b036100d457565b600080fd5b905051906100e6826100c4565b565b6100f1906100ac565b90565b6100fd816100e8565b0361010457565b600080fd5b90505190610116826100f4565b565b9190604083820312610141578061013561013e92600086016100d9565b93602001610109565b90565b61009c565b6101646133c08038038061015981610087565b928339810190610118565b9091565b60001b90565b9061017f60018060a01b0391610168565b9181191691161790565b90565b6101a061019b6101a5926100a1565b610189565b6100a1565b90565b6101b19061018c565b90565b6101bd906101a8565b90565b90565b906101d86101d36101df926101b4565b6101c0565b825461016e565b9055565b6101ec9061018c565b90565b6101f8906101e3565b90565b90565b9061021361020e61021a926101ef565b6101fb565b825461016e565b9055565b9061022d6102349260006101c3565b60016101fe565b56fe60806040526004361015610013575b61099c565b61001e60003561002d565b63491ad5ad0361000e57610963565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b600080fd5b67ffffffffffffffff811161013557610131602091610088565b0190565b610092565b90826000939282370152565b9092919261015b61015682610117565b6100d1565b93818552602085019082840111610177576101759261013a565b565b610112565b9080601f8301121561019a5781602061019793359101610146565b90565b6100eb565b9291906101b36101ae826100f0565b6100d1565b938185526020808601920281019183831161020a5781905b8382106101d9575050505050565b813567ffffffffffffffff8111610205576020916101fa878493870161017c565b8152019101906101cb565b6100eb565b61010d565b9080601f8301121561022d5781602061022a9335910161019f565b90565b6100eb565b67ffffffffffffffff811161024a5760208091020190565b610092565b90565b61025b8161024f565b0361026257565b600080fd5b9050359061027482610252565b565b67ffffffffffffffff811161028e5760208091020190565b610092565b60ff60f81b1690565b6102a581610293565b036102ac57565b600080fd5b905035906102be8261029c565b565b63ffffffff191690565b6102d3816102c0565b036102da57565b600080fd5b905035906102ec826102ca565b565b919060408382031261032a576103239061030860406100d1565b9361031682600083016102b1565b60008601526020016102df565b6020830152565b610083565b90565b61033b8161032f565b0361034257565b600080fd5b9050359061035482610332565b565b919060a0838203126103a45761039d9061037060606100d1565b9361037e82600083016102ee565b600086015261039082604083016102ee565b6020860152608001610347565b6040830152565b610083565b909291926103be6103b982610276565b6100d1565b9381855260a06020860192028301928184116103fd57915b8383106103e35750505050565b602060a0916103f28486610356565b8152019201916103d6565b61010d565b9080601f830112156104205781602061041d933591016103a9565b90565b6100eb565b91909160608184031261048b5761043c60606100d1565b9261044a8160008401610267565b600085015261045c8160208401610267565b6020850152604082013567ffffffffffffffff81116104865761047f9201610402565b6040830152565b6100e6565b610083565b9291906104a461049f82610232565b6100d1565b93818552602080860192028101918383116104fb5781905b8382106104ca575050505050565b813567ffffffffffffffff81116104f6576020916104eb8784938701610425565b8152019101906104bc565b6100eb565b61010d565b9080601f8301121561051e5781602061051b93359101610490565b90565b6100eb565b67ffffffffffffffff811161053b5760208091020190565b610092565b67ffffffffffffffff81116105585760208091020190565b610092565b9092919261057261056d82610540565b6100d1565b93818552602080860192028301928184116105af57915b8383106105965750505050565b602080916105a48486610347565b815201920191610589565b61010d565b9080601f830112156105d2578160206105cf9335910161055d565b90565b6100eb565b91909160608184031261063e576105ee60606100d1565b9260008201359167ffffffffffffffff831161063957610613826106329483016105b4565b60008601526106258260208301610267565b6020860152604001610267565b6040830152565b6100e6565b610083565b92919061065761065282610523565b6100d1565b93818552602080860192028101918383116106ae5781905b83821061067d575050505050565b813567ffffffffffffffff81116106a95760209161069e87849387016105d7565b81520191019061066f565b6100eb565b61010d565b9080601f830112156106d1578160206106ce93359101610643565b90565b6100eb565b91906040838203126107125761070b906106f060406100d1565b936106fe8260008301610267565b6000860152602001610347565b6020830152565b610083565b91909160808184031261077d5761072e60606100d1565b9261073c8160008401610267565b600085015261074e81602084016106d6565b6020850152606082013567ffffffffffffffff81116107785761077192016105d7565b6040830152565b6100e6565b610083565b91909160e08184031261087e5761079960c06100d1565b92600082013567ffffffffffffffff811161087957816107ba91840161020f565b6000850152602082013567ffffffffffffffff811161087457816107df918401610500565b60208501526107f181604084016102ee565b6040850152608082013567ffffffffffffffff811161086f5781610816918401610402565b606085015260a082013567ffffffffffffffff811161086a578161083b9184016106b3565b608085015260c082013567ffffffffffffffff81116108655761085e9201610717565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b600080fd5b909182601f830112156108c25781359167ffffffffffffffff83116108bd5760200192600183028401116108b857565b61010d565b610883565b6100eb565b9060808282031261093b576108df8160008401610074565b92602083013567ffffffffffffffff81116109365782610900918501610782565b9261090e8360408301610347565b92606082013567ffffffffffffffff81116109315761092d9201610888565b9091565b610043565b610043565b61003e565b6109499061032f565b9052565b919061096190600060208501940190610940565b565b34610997576109936109826109793660046108c7565b93929092610d68565b61098a610033565b9182918261094d565b0390f35b610039565b600080fd5b600090565b60001c90565b60018060a01b031690565b6109c36109c8916109a6565b6109ac565b90565b6109d590546109b7565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b610a3c60356040926109d8565b610a45816109e1565b0190565b610a5f9060208101906000818303910152610a2f565b90565b15610a6957565b610a71610033565b62461bcd60e51b815280610a8760048201610a49565b0390fd5b610a95905161032f565b90565b610aa2905161024f565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b90610ac982610abb565b811015610ada576020809102010190565b610aa5565b90565b90565b610af9610af4610afe92610adf565b610ae2565b61024f565b90565b90565b610b18610b13610b1d92610b01565b610ae2565b61024f565b90565b634e487b7160e01b600052601160045260246000fd5b610b45610b4b9193929361024f565b9261024f565b8203918211610b5657565b610b20565b60018060a01b031690565b610b72610b77916109a6565b610b5b565b90565b610b849054610b66565b90565b610b9b610b96610ba092610048565b610ae2565b610048565b90565b610bac90610b87565b90565b610bb890610ba3565b90565b610bc490610293565b9052565b610bd1906102c0565b9052565b90602080610bf993610bef60008201516000860190610bbb565b0151910190610bc8565b565b610c049061024f565b9052565b60209181520190565b9190610c2b81610c2481610c3095610c08565b809561013a565b610088565b0190565b92610c929795919694610c71610c7b92610c67610c8596610c5d60e08a019c60008b0190610bd5565b6040890190610940565b6060870190610bfb565b6080850190610bfb565b60a0830190610bfb565b60c0818503910152610c11565b90565b60e01b90565b90505190610ca882610332565b565b90602082820312610cc457610cc191600001610c9b565b90565b61003e565b610cd290610053565b9052565b5190565b60005b838110610cee575050906000910152565b806020918301518185015201610cdd565b610d1e610d27602093610d2c93610d1581610cd6565b93848093610c08565b95869101610cda565b610088565b0190565b91610d5492610d4760408201936000830190610cc9565b6020818403910152610cff565b90565b610d5f610033565b3d6000823e3d90fd5b6000610e7f91610d9b610d956020979596610d816109a1565b50610d8c60016109cb565b90889091610ee3565b50610a62565b610e68604086015195610e5a610db9898060a0850151015101610a8b565b91610dcc868b60a0840151015101610a98565b9a610e268b610e1f610df58a610dee84880151610de883610ae5565b90610abf565b5101610a98565b94610e19610e098480840151930151610abb565b610e136001610b04565b90610b36565b90610abf565b5101610a98565b98610e38610e3389610b7a565b610baf565b99631789cd63979b959d9390919293610e4f610033565b9e8f978f8901610c34565b8882018103825203886100a8565b610e8a610e73610033565b97889687958694610c95565b845260048401610d30565b03925af1908115610ecf57600091610ea1575b5090565b610ec2915060203d8111610ec8575b610eba81836100a8565b810190610caa565b38610e9d565b503d610eb0565b610d57565b600090565b600090565b151590565b91610f15610f1d9493610ef4610ed4565b50610efd610ed9565b506060840151608085015160a08601519185936110d7565b949015610ede565b610f4f57610f499293506000820151916020810151604082015190608060608401519301519394611238565b91909190565b505060009190565b610f6090610ba3565b90565b610f6c81610ede565b03610f7357565b600080fd5b90505190610f8582610f63565b565b90602082820312610fa157610f9e91600001610f78565b90565b61003e565b610faf9061024f565b9052565b610fbc9061032f565b9052565b90602080610fe493610fda60008201516000860190610fa6565b0151910190610fb3565b565b5190565b60209181520190565b60200190565b9061100681602093610fb3565b0190565b60200190565b9061102d61102761102084610fe6565b8093610fea565b92610ff3565b9060005b81811061103e5750505090565b9091926110576110516001928651610ff9565b9461100a565b9101919091611031565b9061109f906040806110826060840160008701518582036000870152611010565b9461109560208201516020860190610fa6565b0151910190610fa6565b90565b6110c76110d49492936110bd60808401956000850190610bfb565b6020830190610fc0565b6060818403910152611061565b90565b6110f960209195939492956110ea610ed4565b506110f3610ed9565b50610f57565b631f3302a99061112f61110e60008601610a98565b9261113a604086880151970151611123610033565b97889687958695610c95565b8552600485016110a2565b03915afa80156111a65761115791600091611178575b5015610ede565b61116d576111679291909161150b565b91909190565b505050600090600490565b611199915060203d811161119f575b61119181836100a8565b810190610f87565b38611150565b503d611187565b610d57565b5190565b60016111bb910161024f565b90565b6111cd6111d39193929361024f565b9261024f565b82018092116111de57565b610b20565b5190565b634e487b7160e01b600052602160045260246000fd5b600b111561120757565b6111e7565b90611216826111fd565b565b90611222826111ab565b811015611233576020809102010190565b610aa5565b9361125e9061126692979661124b610ed4565b50611254610ed9565b508591909161150b565b919015610ede565b611477575061127485610abb565b61128e611288611283856111ab565b61024f565b9161024f565b0361146a5761129d6000610ae5565b926112a86000610ae5565b935b846112c56112bf6112ba8a610abb565b61024f565b9161024f565b101561131b5761130f611315916113096112ec60206112e58c8b90610abf565b5101610a98565b61130360006112fc8d8c90610abf565b5101610a98565b90610b36565b906111be565b946111af565b936112aa565b909350949093919461133e611338611332866111e3565b9261024f565b9161024f565b0361145d5761134d6000610ae5565b946113586000610ae5565b955b8661137561136f61136a86610abb565b61024f565b9161024f565b101561144e576113b2611395602061138e868b90610abf565b5101610a98565b6113ac60006113a5878c90610abf565b5101610a98565b90610b36565b6113c886836113c28585906111be565b916116c8565b806113dc6113d6600061120c565b9161120c565b0361143e575061140a611410916113f4868c90611218565b5190611401888d90610abf565b518b91926118c1565b15610ede565b61142e576114289161142291906111be565b966111af565b9561135a565b5050505092505050600090600190565b9850505050505091505060009190565b50505092505050600190600090565b5092505050600090600790565b5050509050600090600590565b945050505060009190565b5190565b62ffffff191690565b90565b61149e6114a391611486565b61148f565b9052565b90565b6114b66114bb9161032f565b6114a7565b9052565b602093926114df601d836114d782956114e797611492565b018092611492565b0180926114aa565b0190565b906114f582611482565b811015611506576020809102010190565b610aa5565b919091611516610ed4565b5061151f610ed9565b5061152983611482565b61154361153d611538846111ab565b61024f565b9161024f565b03611631576115526000610ae5565b5b8061156e61156861156387611482565b61024f565b9161024f565b101561162557611607611600611592600061158a868690611218565b510151611a26565b6115eb6115ad60206115a5888890611218565b510151611a26565b916115dc6115c860406115c18a8a90611218565b5101610a8b565b6115d0610033565b948593602085016114bf565b602082018103825203826100a8565b85906115f88886906114eb565b519091611a9d565b5015610ede565b61161957611614906111af565b611553565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b9061165361164e836100f0565b6100d1565b918252565b606090565b60005b82811061166c57505050565b602090611677611658565b8184015201611660565b906116a661168e83611641565b9260208061169c86936100f0565b920191039061165d565b565b906116b2826111e3565b8110156116c3576020809102010190565b610aa5565b9291926116d361163c565b506116dc610ed9565b50816116f06116ea8661024f565b9161024f565b116117be578161171061170a611705846111e3565b61024f565b9161024f565b11801561179c575b6117925761172f61172a858490610b36565b611681565b92825b8061174561173f8861024f565b9161024f565b1015611787576117829061177b61175d8583906116a8565b518761176a848990610b36565b9161177583836116a8565b526116a8565b51506111af565b611732565b509350505090600090565b9192505090600a90565b50836117b86117b26117ad846111e3565b61024f565b9161024f565b11611718565b9192505090600990565b906117da6117d583610276565b6100d1565b918252565b6117e960606100d1565b90565b6117f660406100d1565b90565b600090565b600090565b61180b6117ec565b90602080836118186117f9565b8152016118236117fe565b81525050565b611831611803565b90565b600090565b6118416117df565b90602080808461184f611829565b81520161185a611829565b815201611865611834565b81525050565b611873611839565b90565b60005b82811061188557505050565b60209061189061186b565b8184015201611879565b906118bf6118a7836117c8565b926020806118b58693610276565b9201910390611876565b565b929190936118cd610ed4565b506118df6118da846111e3565b61189a565b946118ea6000610ae5565b5b806119066119006118fb886111e3565b61024f565b9161024f565b1015611948576119439061193c611929866119228985906116a8565b5190611d38565b8983916119368383611218565b52611218565b51506111af565b6118eb565b50925093905061195a92919091611e51565b90565b600090565b61196c9051610293565b90565b61197990516102c0565b90565b90565b61198b61199091610293565b61197c565b9052565b90565b6119a36119a8916102c0565b611994565b9052565b6001816119bf6119c793601c969561197f565b018092611997565b0190565b60200190565b6119db9051611486565b90565b1b90565b6119fc6119f76119f183610cd6565b926119cb565b6119d1565b90601d8110611a0a575b5090565b611a1f9062ffffff1990601d036008026119de565b1638611a06565b611a7a90611a3261195d565b50611a75611a4e6020611a4760008501611962565b930161196f565b91611a66611a5a610033565b938492602084016119ac565b602082018103825203826100a8565b6119e2565b90565b600090565b60061115611a8c57565b6111e7565b90611a9b82611a82565b565b9091611aa7610ed4565b50611ab0611a7d565b50611abd60408401610a98565b611ad0611aca6001610b04565b9161024f565b1115600014611c2757611ae66000840151610fe6565b611af9611af36000610ae5565b9161024f565b03611c1c575b611b0b60208401610a98565b611b28611b22611b1d60408701610a98565b61024f565b9161024f565b1015611c1157611b379061219e565b91611b456000820151610fe6565b611b58611b526000610ae5565b9161024f565b14611bc6579182611b6f6020611b88949501610a98565b916000611b7e60408401610a98565b919201519261222d565b80611b9c611b966000611a91565b91611a91565b03611bbc5750611baf611bb5919261032f565b9161032f565b1490600090565b9291505060009190565b6040611bd29101610a98565b611be5611bdf6001610b04565b9161024f565b14600014611c0757611bfa611c00919261032f565b9161032f565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611c346000840151610fe6565b611c66611c60611c5b611c4960208801610a98565b611c5560408901610a98565b90612073565b61024f565b9161024f565b0315611aff57505050600090600190565b611c7f611839565b90565b60f81b90565b611c9c611c97611ca192610adf565b611c82565b610293565b90565b611cae6000611c88565b90565b905090565b611cdb611cd292602092611cc981610cd6565b94858093611cb1565b93849101610cda565b0190565b91611cfe600184611cf6611d059796601d9661197f565b018092611492565b0190611cb6565b90565b60001b90565b611d1791611cb6565b90565b611d2460606100d1565b90565b52565b90611d349061032f565b9052565b906000611d94602092611d49611c77565b50611d83611d55611ca4565b611d75611d6188611a26565b93611d6a610033565b948593898501611cdf565b8682018103825203826100a8565b611d8b610033565b91829182611d0e565b039060025afa15611ddb57611dd8611dad600051611d08565b611dcf83611dc6611dbc611d1a565b9560008701611d27565b60208501611d27565b60408301611d2a565b90565b610d57565b611de99061024f565b6000198114611df85760010190565b610b20565b90565b611e14611e0f611e1992611dfd565b610ae2565b61024f565b90565b611e2b611e319193929361024f565b9261024f565b91611e3d83820261024f565b928184041490151715611e4c57565b610b20565b611e59610ed4565b50611e646000610ae5565b93611e7a611e7560408501516111ab565b61189a565b91611e856000610ae5565b955b80611ea5611e9f611e9a60008901610a98565b61024f565b9161024f565b141580611ff4575b15611f0957611efd81611ecf611f0393611ec960008a01610a98565b9061244b565b611ef5611ee160408a01518c90611218565b51888c91611eef8383611218565b52611218565b5150906111be565b96611de0565b95611e87565b5093909450611f809150611f3a611f2a611f2560208601610a98565b612521565b611f346002611e00565b90611e1c565b80611f4e611f486001610b04565b9161024f565b10611fe4575b839160009190600090611f7a611f74611f6e600096610ae5565b93610ae5565b94610ae5565b946125ae565b505093905b84611fa4611f9e611f9960408701516111ab565b61024f565b9161024f565b1015611fd357611fc7611fcd91611fc060408601518890611218565b5190612831565b946111af565b93611f85565b909350611fe192915061299f565b90565b50611fef6001610b04565b611f54565b508661201461200e61200960408901516111ab565b61024f565b9161024f565b10611ead565b600090565b90565b61203661203161203b9261201f565b610ae2565b61024f565b90565b612049610100612022565b90565b61206b9061206561205f6120709461024f565b9161024f565b906119de565b61024f565b90565b61207b61201a565b508161209061208a6001610b04565b9161024f565b1115612174576120b06120a161203e565b6120aa84612a1a565b90610b36565b916120d860016120d36120cd866120c76001610b04565b90610b36565b91610b04565b61204c565b90826120ff6120f96120f4856120ee6001610b04565b90610b36565b61024f565b9161024f565b111560001461210e5750505090565b90809293506121266121206001610b04565b9161024f565b1460001461213e5750505061213b6001610b04565b90565b61215861215e926121526001958290610b36565b92610b36565b90612073565b9061216c6121719291610b04565b6111be565b90565b50506121806000610ae5565b90565b8061219460019261219b959461197f565b0190611cb6565b90565b60006121ef6020926121ae6109a1565b506121de6121ba611ca4565b6121d06121c5610033565b938492888401612183565b8682018103825203826100a8565b6121e6610033565b91829182611d0e565b039060025afa1561220857612205600051611d08565b90565b610d57565b9061221782610fe6565b811015612228576020809102010190565b610aa5565b9392936122386109a1565b50612241611a7d565b50816122566122506000610ae5565b9161024f565b14612440578161226f6122696001610b04565b9161024f565b1461240f5761227d85610fe6565b61229061228a6000610ae5565b9161024f565b146124045761229e82612521565b6122d0866000906122ca6122c46122b48b610fe6565b6122be6001610b04565b90610b36565b92610ae5565b90612bd2565b916122d9611a7d565b50806122ed6122e78461024f565b9161024f565b106123805761231d93929161230f612315926123076109a1565b508290610b36565b93610b36565b84919261222d565b90918161233361232d6000611a91565b91611a91565b0361237857505061236d61236884612362612352612372969792610fe6565b61235c6001610b04565b90610b36565b9061220d565b610a8b565b612d27565b90600090565b915092509190565b6123a093506000969496929192506123966109a1565b509186919261222d565b9093816123b66123b06000611a91565b91611a91565b036123fc5750506123f06123eb6123f69394926123e56123d582610fe6565b6123df6001610b04565b90610b36565b9061220d565b610a8b565b90612d27565b90600090565b915092509190565b505090915090600590565b5050909161241c90610fe6565b61242f6124296000610ae5565b9161024f565b0361243a5790600090565b90600490565b505090915090600390565b61247261246d6124829261245d61201a565b5061246781612d99565b94610b36565b612e20565b61247c6001610b04565b90610b36565b8161249561248f8361024f565b9161024f565b116124b157506124ae906124a96001610b04565b61204c565b90565b6124c591506124c06001610b04565b61204c565b90565b156124cf57565b600080fd5b60ff1690565b6124ee6124e96124f392610b01565b610ae2565b6124d4565b90565b1c90565b6125199061251361250d61251e946124d4565b9161024f565b906124f6565b61024f565b90565b61252961201a565b506125488161254161253b6001610b04565b9161024f565b10156124c8565b61257861255482612e20565b61257361256d6001926125676001610b04565b90610b36565b91610b04565b61204c565b9061258c612586839261024f565b9161024f565b14612595575b90565b6125a9906125a360016124da565b906124fa565b612592565b919092939594956125bd611c77565b506125c661201a565b506125cf61201a565b506125d8610ed4565b506125e4858390610b36565b6125f76125f16001610b04565b9161024f565b14612703578461261a61261461260f60008701610a98565b61024f565b9161024f565b111580156126dd575b6126bb576126579061263e612639878590610b36565b612521565b97849186859061264f878d906111be565b9293946125ae565b9161267a97939161267195935094919990949596926111be565b919293946125ae565b9491909290929461269461268e6001610ede565b91610ede565b146126ae576126a291612831565b90929160009193929190565b5090929160009193929190565b93916126d39596935060409150015192909192612eb9565b9193909293929190565b50816126fc6126f66126f160208701610a98565b61024f565b9161024f565b1015612623565b9391906127166000839895979801610a98565b6127286127228361024f565b9161024f565b11159081612775575b506127525761274894506040015192909192612eb9565b9193909293929190565b5050908261276461276b9493916111ab565b9192612e75565b9193909293929190565b905061279461278e61278960208501610a98565b61024f565b9161024f565b1038612731565b6127a3611803565b90565b6127ba6127b56127bf92610b01565b611c82565b610293565b90565b6127cc60016127a6565b90565b9461281d6020601d9661281588839c9b9861280d826128259a61280561282d9f806127fd600192869f61197f565b018092611492565b018092611492565b0180926114aa565b018092611492565b018092611492565b0180926114aa565b0190565b9061283a611c77565b506020600061290e612853828601518386015190612efc565b9361285c61279b565b506128728387015161286c612f8e565b90612fd4565b831461295c576128fd612883612f8e565b965b6128ef6128906127c2565b9161289d87820151611a26565b946128b660406128af8b850151611a26565b9301610a8b565b6128c289830151611a26565b906128db60406128d48d860151611a26565b9401610a8b565b936128e4610033565b9889978d89016127cf565b8682018103825203826100a8565b612905610033565b91829182611d0e565b039060025afa15612957576129549061294b61292b600051611d08565b9193612942612938611d1a565b9560008701611d27565b60208501611d27565b60408301611d2a565b90565b610d57565b6129718382015161296b612f8e565b90612fd4565b8314612985576128fd84870151965b612885565b6128fd612999858801518684015190613004565b96612980565b906129a8610ed4565b506129bc6000830151600083015190612fd4565b80612a01575b91826129ce575b505090565b6129f99192506129ee60406129e7816129f39401610a8b565b9401610a8b565b61032f565b9161032f565b1438806129c9565b50612a156020830151602083015190612fd4565b6129c2565b612a2261201a565b50612a2d6000610ae5565b5b612a426001612a3d8391610b04565b61204c565b612a54612a4e8461024f565b9161024f565b1015612a7357612a6e90612a686001610b04565b906111be565b612a2e565b612a859150612a8061203e565b610b36565b90565b606090565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612ae8602a6040926109d8565b612af181612a8d565b0190565b612b0b9060208101906000818303910152612adb565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612b69602f6040926109d8565b612b7281612b0e565b0190565b612b8c9060208101906000818303910152612b5c565b90565b90612ba1612b9c83610540565b6100d1565b918252565b369037565b90612bd0612bb883612b8f565b92602080612bc68693610540565b9201910390612ba6565b565b929092612bdd612a88565b5083612bf1612beb8561024f565b9161024f565b11612cd95783612c11612c0b612c0684610fe6565b61024f565b9161024f565b118015612cb7575b612c9557612c30612c2b848690610b36565b612bab565b91845b80612c46612c408761024f565b9161024f565b1015612c8c57612c8790612c82612c66612c6186849061220d565b610a8b565b612c7d8791612c76858c90610b36565b909261220d565b611d2a565b6111af565b612c33565b50935050905090565b612c9d610033565b62461bcd60e51b815280612cb360048201612b76565b0390fd5b5082612cd3612ccd612cc884610fe6565b61024f565b9161024f565b11612c19565b612ce1610033565b62461bcd60e51b815280612cf760048201612af5565b0390fd5b60209392612d1b600183612d138895612d239761197f565b0180926114aa565b0180926114aa565b0190565b612d7b602092612d6a600093612d3b6109a1565b50612d5c612d476127c2565b9193612d51610033565b948593898501612cfb565b8682018103825203826100a8565b612d72610033565b91829182611d0e565b039060025afa15612d9457612d91600051611d08565b90565b610d57565b612da161201a565b50612dac6001610b04565b91612db76000610ae5565b5b82612dcc612dc66000610ae5565b9161024f565b141580612e03575b15612dfc57612de5612df691611de0565b92612df060016124da565b906124fa565b91612db8565b9150915090565b50838316612e1a612e146000610ae5565b9161024f565b14612dd4565b612e2861201a565b50612e336000610ae5565b5b81612e48612e426000610ae5565b9161024f565b14612e7057612e59612e6a91611de0565b91612e6460016124da565b906124fa565b90612e34565b905090565b91612ea992949394612e85611c77565b50612e8e61201a565b50612e9761201a565b50612ea0610ed4565b50919091613029565b9391929093929193929193929190565b91612eed92949394612ec9611c77565b50612ed261201a565b50612edb61201a565b50612ee4610ed4565b50919091613029565b91929091929193929193929190565b90612f0561279b565b50612f118282906130f3565b600014612f1c575090565b905090565b612f2b60406100d1565b90565b90565b612f45612f40612f4a92612f2e565b611c82565b610293565b90565b90612f5790610293565b9052565b90565b60201b90565b612f78612f73612f7d92612f5b565b612f5e565b6102c0565b90565b90612f8a906102c0565b9052565b612f9661279b565b5060ff612fd1612fc860018060e01b03612fc3612fba612fb4612f21565b95612f31565b60008601612f4d565b612f64565b60208301612f80565b90565b612ffa612ff5612fef61300093612fe9610ed4565b50611a26565b93611a26565b611486565b91611486565b1490565b9061300d61279b565b50613019828290613123565b600014613024575090565b905090565b9091613033611c77565b5061303c61201a565b50613045610ed4565b5061304f826111ab565b61306261305c6000610ae5565b9161024f565b1480156130d0575b9081156130b3575b506130a057613085613097918390611218565b51916130916001610b04565b906111be565b91600091929190565b506130a9611c77565b9091600191929190565b90506130c86130c2849261024f565b9161024f565b101538613072565b50826130ec6130e66130e1856111ab565b61024f565b9161024f565b101561306a565b61311961311461310e61311f93613108610ed4565b50611a26565b93611a26565b611486565b91611486565b1090565b61314961314461313e61314f93613138610ed4565b50611a26565b93611a26565b611486565b91611486565b119056fea2646970667358221220674bdcc27ec55d5664feec2f564ff66bb8f2a9f5ae809a153df87c4cda476aaa64736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361015610013575b61099c565b61001e60003561002d565b63491ad5ad0361000e57610963565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b600080fd5b67ffffffffffffffff811161013557610131602091610088565b0190565b610092565b90826000939282370152565b9092919261015b61015682610117565b6100d1565b93818552602085019082840111610177576101759261013a565b565b610112565b9080601f8301121561019a5781602061019793359101610146565b90565b6100eb565b9291906101b36101ae826100f0565b6100d1565b938185526020808601920281019183831161020a5781905b8382106101d9575050505050565b813567ffffffffffffffff8111610205576020916101fa878493870161017c565b8152019101906101cb565b6100eb565b61010d565b9080601f8301121561022d5781602061022a9335910161019f565b90565b6100eb565b67ffffffffffffffff811161024a5760208091020190565b610092565b90565b61025b8161024f565b0361026257565b600080fd5b9050359061027482610252565b565b67ffffffffffffffff811161028e5760208091020190565b610092565b60ff60f81b1690565b6102a581610293565b036102ac57565b600080fd5b905035906102be8261029c565b565b63ffffffff191690565b6102d3816102c0565b036102da57565b600080fd5b905035906102ec826102ca565b565b919060408382031261032a576103239061030860406100d1565b9361031682600083016102b1565b60008601526020016102df565b6020830152565b610083565b90565b61033b8161032f565b0361034257565b600080fd5b9050359061035482610332565b565b919060a0838203126103a45761039d9061037060606100d1565b9361037e82600083016102ee565b600086015261039082604083016102ee565b6020860152608001610347565b6040830152565b610083565b909291926103be6103b982610276565b6100d1565b9381855260a06020860192028301928184116103fd57915b8383106103e35750505050565b602060a0916103f28486610356565b8152019201916103d6565b61010d565b9080601f830112156104205781602061041d933591016103a9565b90565b6100eb565b91909160608184031261048b5761043c60606100d1565b9261044a8160008401610267565b600085015261045c8160208401610267565b6020850152604082013567ffffffffffffffff81116104865761047f9201610402565b6040830152565b6100e6565b610083565b9291906104a461049f82610232565b6100d1565b93818552602080860192028101918383116104fb5781905b8382106104ca575050505050565b813567ffffffffffffffff81116104f6576020916104eb8784938701610425565b8152019101906104bc565b6100eb565b61010d565b9080601f8301121561051e5781602061051b93359101610490565b90565b6100eb565b67ffffffffffffffff811161053b5760208091020190565b610092565b67ffffffffffffffff81116105585760208091020190565b610092565b9092919261057261056d82610540565b6100d1565b93818552602080860192028301928184116105af57915b8383106105965750505050565b602080916105a48486610347565b815201920191610589565b61010d565b9080601f830112156105d2578160206105cf9335910161055d565b90565b6100eb565b91909160608184031261063e576105ee60606100d1565b9260008201359167ffffffffffffffff831161063957610613826106329483016105b4565b60008601526106258260208301610267565b6020860152604001610267565b6040830152565b6100e6565b610083565b92919061065761065282610523565b6100d1565b93818552602080860192028101918383116106ae5781905b83821061067d575050505050565b813567ffffffffffffffff81116106a95760209161069e87849387016105d7565b81520191019061066f565b6100eb565b61010d565b9080601f830112156106d1578160206106ce93359101610643565b90565b6100eb565b91906040838203126107125761070b906106f060406100d1565b936106fe8260008301610267565b6000860152602001610347565b6020830152565b610083565b91909160808184031261077d5761072e60606100d1565b9261073c8160008401610267565b600085015261074e81602084016106d6565b6020850152606082013567ffffffffffffffff81116107785761077192016105d7565b6040830152565b6100e6565b610083565b91909160e08184031261087e5761079960c06100d1565b92600082013567ffffffffffffffff811161087957816107ba91840161020f565b6000850152602082013567ffffffffffffffff811161087457816107df918401610500565b60208501526107f181604084016102ee565b6040850152608082013567ffffffffffffffff811161086f5781610816918401610402565b606085015260a082013567ffffffffffffffff811161086a578161083b9184016106b3565b608085015260c082013567ffffffffffffffff81116108655761085e9201610717565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b600080fd5b909182601f830112156108c25781359167ffffffffffffffff83116108bd5760200192600183028401116108b857565b61010d565b610883565b6100eb565b9060808282031261093b576108df8160008401610074565b92602083013567ffffffffffffffff81116109365782610900918501610782565b9261090e8360408301610347565b92606082013567ffffffffffffffff81116109315761092d9201610888565b9091565b610043565b610043565b61003e565b6109499061032f565b9052565b919061096190600060208501940190610940565b565b34610997576109936109826109793660046108c7565b93929092610d68565b61098a610033565b9182918261094d565b0390f35b610039565b600080fd5b600090565b60001c90565b60018060a01b031690565b6109c36109c8916109a6565b6109ac565b90565b6109d590546109b7565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b610a3c60356040926109d8565b610a45816109e1565b0190565b610a5f9060208101906000818303910152610a2f565b90565b15610a6957565b610a71610033565b62461bcd60e51b815280610a8760048201610a49565b0390fd5b610a95905161032f565b90565b610aa2905161024f565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b90610ac982610abb565b811015610ada576020809102010190565b610aa5565b90565b90565b610af9610af4610afe92610adf565b610ae2565b61024f565b90565b90565b610b18610b13610b1d92610b01565b610ae2565b61024f565b90565b634e487b7160e01b600052601160045260246000fd5b610b45610b4b9193929361024f565b9261024f565b8203918211610b5657565b610b20565b60018060a01b031690565b610b72610b77916109a6565b610b5b565b90565b610b849054610b66565b90565b610b9b610b96610ba092610048565b610ae2565b610048565b90565b610bac90610b87565b90565b610bb890610ba3565b90565b610bc490610293565b9052565b610bd1906102c0565b9052565b90602080610bf993610bef60008201516000860190610bbb565b0151910190610bc8565b565b610c049061024f565b9052565b60209181520190565b9190610c2b81610c2481610c3095610c08565b809561013a565b610088565b0190565b92610c929795919694610c71610c7b92610c67610c8596610c5d60e08a019c60008b0190610bd5565b6040890190610940565b6060870190610bfb565b6080850190610bfb565b60a0830190610bfb565b60c0818503910152610c11565b90565b60e01b90565b90505190610ca882610332565b565b90602082820312610cc457610cc191600001610c9b565b90565b61003e565b610cd290610053565b9052565b5190565b60005b838110610cee575050906000910152565b806020918301518185015201610cdd565b610d1e610d27602093610d2c93610d1581610cd6565b93848093610c08565b95869101610cda565b610088565b0190565b91610d5492610d4760408201936000830190610cc9565b6020818403910152610cff565b90565b610d5f610033565b3d6000823e3d90fd5b6000610e7f91610d9b610d956020979596610d816109a1565b50610d8c60016109cb565b90889091610ee3565b50610a62565b610e68604086015195610e5a610db9898060a0850151015101610a8b565b91610dcc868b60a0840151015101610a98565b9a610e268b610e1f610df58a610dee84880151610de883610ae5565b90610abf565b5101610a98565b94610e19610e098480840151930151610abb565b610e136001610b04565b90610b36565b90610abf565b5101610a98565b98610e38610e3389610b7a565b610baf565b99631789cd63979b959d9390919293610e4f610033565b9e8f978f8901610c34565b8882018103825203886100a8565b610e8a610e73610033565b97889687958694610c95565b845260048401610d30565b03925af1908115610ecf57600091610ea1575b5090565b610ec2915060203d8111610ec8575b610eba81836100a8565b810190610caa565b38610e9d565b503d610eb0565b610d57565b600090565b600090565b151590565b91610f15610f1d9493610ef4610ed4565b50610efd610ed9565b506060840151608085015160a08601519185936110d7565b949015610ede565b610f4f57610f499293506000820151916020810151604082015190608060608401519301519394611238565b91909190565b505060009190565b610f6090610ba3565b90565b610f6c81610ede565b03610f7357565b600080fd5b90505190610f8582610f63565b565b90602082820312610fa157610f9e91600001610f78565b90565b61003e565b610faf9061024f565b9052565b610fbc9061032f565b9052565b90602080610fe493610fda60008201516000860190610fa6565b0151910190610fb3565b565b5190565b60209181520190565b60200190565b9061100681602093610fb3565b0190565b60200190565b9061102d61102761102084610fe6565b8093610fea565b92610ff3565b9060005b81811061103e5750505090565b9091926110576110516001928651610ff9565b9461100a565b9101919091611031565b9061109f906040806110826060840160008701518582036000870152611010565b9461109560208201516020860190610fa6565b0151910190610fa6565b90565b6110c76110d49492936110bd60808401956000850190610bfb565b6020830190610fc0565b6060818403910152611061565b90565b6110f960209195939492956110ea610ed4565b506110f3610ed9565b50610f57565b631f3302a99061112f61110e60008601610a98565b9261113a604086880151970151611123610033565b97889687958695610c95565b8552600485016110a2565b03915afa80156111a65761115791600091611178575b5015610ede565b61116d576111679291909161150b565b91909190565b505050600090600490565b611199915060203d811161119f575b61119181836100a8565b810190610f87565b38611150565b503d611187565b610d57565b5190565b60016111bb910161024f565b90565b6111cd6111d39193929361024f565b9261024f565b82018092116111de57565b610b20565b5190565b634e487b7160e01b600052602160045260246000fd5b600b111561120757565b6111e7565b90611216826111fd565b565b90611222826111ab565b811015611233576020809102010190565b610aa5565b9361125e9061126692979661124b610ed4565b50611254610ed9565b508591909161150b565b919015610ede565b611477575061127485610abb565b61128e611288611283856111ab565b61024f565b9161024f565b0361146a5761129d6000610ae5565b926112a86000610ae5565b935b846112c56112bf6112ba8a610abb565b61024f565b9161024f565b101561131b5761130f611315916113096112ec60206112e58c8b90610abf565b5101610a98565b61130360006112fc8d8c90610abf565b5101610a98565b90610b36565b906111be565b946111af565b936112aa565b909350949093919461133e611338611332866111e3565b9261024f565b9161024f565b0361145d5761134d6000610ae5565b946113586000610ae5565b955b8661137561136f61136a86610abb565b61024f565b9161024f565b101561144e576113b2611395602061138e868b90610abf565b5101610a98565b6113ac60006113a5878c90610abf565b5101610a98565b90610b36565b6113c886836113c28585906111be565b916116c8565b806113dc6113d6600061120c565b9161120c565b0361143e575061140a611410916113f4868c90611218565b5190611401888d90610abf565b518b91926118c1565b15610ede565b61142e576114289161142291906111be565b966111af565b9561135a565b5050505092505050600090600190565b9850505050505091505060009190565b50505092505050600190600090565b5092505050600090600790565b5050509050600090600590565b945050505060009190565b5190565b62ffffff191690565b90565b61149e6114a391611486565b61148f565b9052565b90565b6114b66114bb9161032f565b6114a7565b9052565b602093926114df601d836114d782956114e797611492565b018092611492565b0180926114aa565b0190565b906114f582611482565b811015611506576020809102010190565b610aa5565b919091611516610ed4565b5061151f610ed9565b5061152983611482565b61154361153d611538846111ab565b61024f565b9161024f565b03611631576115526000610ae5565b5b8061156e61156861156387611482565b61024f565b9161024f565b101561162557611607611600611592600061158a868690611218565b510151611a26565b6115eb6115ad60206115a5888890611218565b510151611a26565b916115dc6115c860406115c18a8a90611218565b5101610a8b565b6115d0610033565b948593602085016114bf565b602082018103825203826100a8565b85906115f88886906114eb565b519091611a9d565b5015610ede565b61161957611614906111af565b611553565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b9061165361164e836100f0565b6100d1565b918252565b606090565b60005b82811061166c57505050565b602090611677611658565b8184015201611660565b906116a661168e83611641565b9260208061169c86936100f0565b920191039061165d565b565b906116b2826111e3565b8110156116c3576020809102010190565b610aa5565b9291926116d361163c565b506116dc610ed9565b50816116f06116ea8661024f565b9161024f565b116117be578161171061170a611705846111e3565b61024f565b9161024f565b11801561179c575b6117925761172f61172a858490610b36565b611681565b92825b8061174561173f8861024f565b9161024f565b1015611787576117829061177b61175d8583906116a8565b518761176a848990610b36565b9161177583836116a8565b526116a8565b51506111af565b611732565b509350505090600090565b9192505090600a90565b50836117b86117b26117ad846111e3565b61024f565b9161024f565b11611718565b9192505090600990565b906117da6117d583610276565b6100d1565b918252565b6117e960606100d1565b90565b6117f660406100d1565b90565b600090565b600090565b61180b6117ec565b90602080836118186117f9565b8152016118236117fe565b81525050565b611831611803565b90565b600090565b6118416117df565b90602080808461184f611829565b81520161185a611829565b815201611865611834565b81525050565b611873611839565b90565b60005b82811061188557505050565b60209061189061186b565b8184015201611879565b906118bf6118a7836117c8565b926020806118b58693610276565b9201910390611876565b565b929190936118cd610ed4565b506118df6118da846111e3565b61189a565b946118ea6000610ae5565b5b806119066119006118fb886111e3565b61024f565b9161024f565b1015611948576119439061193c611929866119228985906116a8565b5190611d38565b8983916119368383611218565b52611218565b51506111af565b6118eb565b50925093905061195a92919091611e51565b90565b600090565b61196c9051610293565b90565b61197990516102c0565b90565b90565b61198b61199091610293565b61197c565b9052565b90565b6119a36119a8916102c0565b611994565b9052565b6001816119bf6119c793601c969561197f565b018092611997565b0190565b60200190565b6119db9051611486565b90565b1b90565b6119fc6119f76119f183610cd6565b926119cb565b6119d1565b90601d8110611a0a575b5090565b611a1f9062ffffff1990601d036008026119de565b1638611a06565b611a7a90611a3261195d565b50611a75611a4e6020611a4760008501611962565b930161196f565b91611a66611a5a610033565b938492602084016119ac565b602082018103825203826100a8565b6119e2565b90565b600090565b60061115611a8c57565b6111e7565b90611a9b82611a82565b565b9091611aa7610ed4565b50611ab0611a7d565b50611abd60408401610a98565b611ad0611aca6001610b04565b9161024f565b1115600014611c2757611ae66000840151610fe6565b611af9611af36000610ae5565b9161024f565b03611c1c575b611b0b60208401610a98565b611b28611b22611b1d60408701610a98565b61024f565b9161024f565b1015611c1157611b379061219e565b91611b456000820151610fe6565b611b58611b526000610ae5565b9161024f565b14611bc6579182611b6f6020611b88949501610a98565b916000611b7e60408401610a98565b919201519261222d565b80611b9c611b966000611a91565b91611a91565b03611bbc5750611baf611bb5919261032f565b9161032f565b1490600090565b9291505060009190565b6040611bd29101610a98565b611be5611bdf6001610b04565b9161024f565b14600014611c0757611bfa611c00919261032f565b9161032f565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611c346000840151610fe6565b611c66611c60611c5b611c4960208801610a98565b611c5560408901610a98565b90612073565b61024f565b9161024f565b0315611aff57505050600090600190565b611c7f611839565b90565b60f81b90565b611c9c611c97611ca192610adf565b611c82565b610293565b90565b611cae6000611c88565b90565b905090565b611cdb611cd292602092611cc981610cd6565b94858093611cb1565b93849101610cda565b0190565b91611cfe600184611cf6611d059796601d9661197f565b018092611492565b0190611cb6565b90565b60001b90565b611d1791611cb6565b90565b611d2460606100d1565b90565b52565b90611d349061032f565b9052565b906000611d94602092611d49611c77565b50611d83611d55611ca4565b611d75611d6188611a26565b93611d6a610033565b948593898501611cdf565b8682018103825203826100a8565b611d8b610033565b91829182611d0e565b039060025afa15611ddb57611dd8611dad600051611d08565b611dcf83611dc6611dbc611d1a565b9560008701611d27565b60208501611d27565b60408301611d2a565b90565b610d57565b611de99061024f565b6000198114611df85760010190565b610b20565b90565b611e14611e0f611e1992611dfd565b610ae2565b61024f565b90565b611e2b611e319193929361024f565b9261024f565b91611e3d83820261024f565b928184041490151715611e4c57565b610b20565b611e59610ed4565b50611e646000610ae5565b93611e7a611e7560408501516111ab565b61189a565b91611e856000610ae5565b955b80611ea5611e9f611e9a60008901610a98565b61024f565b9161024f565b141580611ff4575b15611f0957611efd81611ecf611f0393611ec960008a01610a98565b9061244b565b611ef5611ee160408a01518c90611218565b51888c91611eef8383611218565b52611218565b5150906111be565b96611de0565b95611e87565b5093909450611f809150611f3a611f2a611f2560208601610a98565b612521565b611f346002611e00565b90611e1c565b80611f4e611f486001610b04565b9161024f565b10611fe4575b839160009190600090611f7a611f74611f6e600096610ae5565b93610ae5565b94610ae5565b946125ae565b505093905b84611fa4611f9e611f9960408701516111ab565b61024f565b9161024f565b1015611fd357611fc7611fcd91611fc060408601518890611218565b5190612831565b946111af565b93611f85565b909350611fe192915061299f565b90565b50611fef6001610b04565b611f54565b508661201461200e61200960408901516111ab565b61024f565b9161024f565b10611ead565b600090565b90565b61203661203161203b9261201f565b610ae2565b61024f565b90565b612049610100612022565b90565b61206b9061206561205f6120709461024f565b9161024f565b906119de565b61024f565b90565b61207b61201a565b508161209061208a6001610b04565b9161024f565b1115612174576120b06120a161203e565b6120aa84612a1a565b90610b36565b916120d860016120d36120cd866120c76001610b04565b90610b36565b91610b04565b61204c565b90826120ff6120f96120f4856120ee6001610b04565b90610b36565b61024f565b9161024f565b111560001461210e5750505090565b90809293506121266121206001610b04565b9161024f565b1460001461213e5750505061213b6001610b04565b90565b61215861215e926121526001958290610b36565b92610b36565b90612073565b9061216c6121719291610b04565b6111be565b90565b50506121806000610ae5565b90565b8061219460019261219b959461197f565b0190611cb6565b90565b60006121ef6020926121ae6109a1565b506121de6121ba611ca4565b6121d06121c5610033565b938492888401612183565b8682018103825203826100a8565b6121e6610033565b91829182611d0e565b039060025afa1561220857612205600051611d08565b90565b610d57565b9061221782610fe6565b811015612228576020809102010190565b610aa5565b9392936122386109a1565b50612241611a7d565b50816122566122506000610ae5565b9161024f565b14612440578161226f6122696001610b04565b9161024f565b1461240f5761227d85610fe6565b61229061228a6000610ae5565b9161024f565b146124045761229e82612521565b6122d0866000906122ca6122c46122b48b610fe6565b6122be6001610b04565b90610b36565b92610ae5565b90612bd2565b916122d9611a7d565b50806122ed6122e78461024f565b9161024f565b106123805761231d93929161230f612315926123076109a1565b508290610b36565b93610b36565b84919261222d565b90918161233361232d6000611a91565b91611a91565b0361237857505061236d61236884612362612352612372969792610fe6565b61235c6001610b04565b90610b36565b9061220d565b610a8b565b612d27565b90600090565b915092509190565b6123a093506000969496929192506123966109a1565b509186919261222d565b9093816123b66123b06000611a91565b91611a91565b036123fc5750506123f06123eb6123f69394926123e56123d582610fe6565b6123df6001610b04565b90610b36565b9061220d565b610a8b565b90612d27565b90600090565b915092509190565b505090915090600590565b5050909161241c90610fe6565b61242f6124296000610ae5565b9161024f565b0361243a5790600090565b90600490565b505090915090600390565b61247261246d6124829261245d61201a565b5061246781612d99565b94610b36565b612e20565b61247c6001610b04565b90610b36565b8161249561248f8361024f565b9161024f565b116124b157506124ae906124a96001610b04565b61204c565b90565b6124c591506124c06001610b04565b61204c565b90565b156124cf57565b600080fd5b60ff1690565b6124ee6124e96124f392610b01565b610ae2565b6124d4565b90565b1c90565b6125199061251361250d61251e946124d4565b9161024f565b906124f6565b61024f565b90565b61252961201a565b506125488161254161253b6001610b04565b9161024f565b10156124c8565b61257861255482612e20565b61257361256d6001926125676001610b04565b90610b36565b91610b04565b61204c565b9061258c612586839261024f565b9161024f565b14612595575b90565b6125a9906125a360016124da565b906124fa565b612592565b919092939594956125bd611c77565b506125c661201a565b506125cf61201a565b506125d8610ed4565b506125e4858390610b36565b6125f76125f16001610b04565b9161024f565b14612703578461261a61261461260f60008701610a98565b61024f565b9161024f565b111580156126dd575b6126bb576126579061263e612639878590610b36565b612521565b97849186859061264f878d906111be565b9293946125ae565b9161267a97939161267195935094919990949596926111be565b919293946125ae565b9491909290929461269461268e6001610ede565b91610ede565b146126ae576126a291612831565b90929160009193929190565b5090929160009193929190565b93916126d39596935060409150015192909192612eb9565b9193909293929190565b50816126fc6126f66126f160208701610a98565b61024f565b9161024f565b1015612623565b9391906127166000839895979801610a98565b6127286127228361024f565b9161024f565b11159081612775575b506127525761274894506040015192909192612eb9565b9193909293929190565b5050908261276461276b9493916111ab565b9192612e75565b9193909293929190565b905061279461278e61278960208501610a98565b61024f565b9161024f565b1038612731565b6127a3611803565b90565b6127ba6127b56127bf92610b01565b611c82565b610293565b90565b6127cc60016127a6565b90565b9461281d6020601d9661281588839c9b9861280d826128259a61280561282d9f806127fd600192869f61197f565b018092611492565b018092611492565b0180926114aa565b018092611492565b018092611492565b0180926114aa565b0190565b9061283a611c77565b506020600061290e612853828601518386015190612efc565b9361285c61279b565b506128728387015161286c612f8e565b90612fd4565b831461295c576128fd612883612f8e565b965b6128ef6128906127c2565b9161289d87820151611a26565b946128b660406128af8b850151611a26565b9301610a8b565b6128c289830151611a26565b906128db60406128d48d860151611a26565b9401610a8b565b936128e4610033565b9889978d89016127cf565b8682018103825203826100a8565b612905610033565b91829182611d0e565b039060025afa15612957576129549061294b61292b600051611d08565b9193612942612938611d1a565b9560008701611d27565b60208501611d27565b60408301611d2a565b90565b610d57565b6129718382015161296b612f8e565b90612fd4565b8314612985576128fd84870151965b612885565b6128fd612999858801518684015190613004565b96612980565b906129a8610ed4565b506129bc6000830151600083015190612fd4565b80612a01575b91826129ce575b505090565b6129f99192506129ee60406129e7816129f39401610a8b565b9401610a8b565b61032f565b9161032f565b1438806129c9565b50612a156020830151602083015190612fd4565b6129c2565b612a2261201a565b50612a2d6000610ae5565b5b612a426001612a3d8391610b04565b61204c565b612a54612a4e8461024f565b9161024f565b1015612a7357612a6e90612a686001610b04565b906111be565b612a2e565b612a859150612a8061203e565b610b36565b90565b606090565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612ae8602a6040926109d8565b612af181612a8d565b0190565b612b0b9060208101906000818303910152612adb565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612b69602f6040926109d8565b612b7281612b0e565b0190565b612b8c9060208101906000818303910152612b5c565b90565b90612ba1612b9c83610540565b6100d1565b918252565b369037565b90612bd0612bb883612b8f565b92602080612bc68693610540565b9201910390612ba6565b565b929092612bdd612a88565b5083612bf1612beb8561024f565b9161024f565b11612cd95783612c11612c0b612c0684610fe6565b61024f565b9161024f565b118015612cb7575b612c9557612c30612c2b848690610b36565b612bab565b91845b80612c46612c408761024f565b9161024f565b1015612c8c57612c8790612c82612c66612c6186849061220d565b610a8b565b612c7d8791612c76858c90610b36565b909261220d565b611d2a565b6111af565b612c33565b50935050905090565b612c9d610033565b62461bcd60e51b815280612cb360048201612b76565b0390fd5b5082612cd3612ccd612cc884610fe6565b61024f565b9161024f565b11612c19565b612ce1610033565b62461bcd60e51b815280612cf760048201612af5565b0390fd5b60209392612d1b600183612d138895612d239761197f565b0180926114aa565b0180926114aa565b0190565b612d7b602092612d6a600093612d3b6109a1565b50612d5c612d476127c2565b9193612d51610033565b948593898501612cfb565b8682018103825203826100a8565b612d72610033565b91829182611d0e565b039060025afa15612d9457612d91600051611d08565b90565b610d57565b612da161201a565b50612dac6001610b04565b91612db76000610ae5565b5b82612dcc612dc66000610ae5565b9161024f565b141580612e03575b15612dfc57612de5612df691611de0565b92612df060016124da565b906124fa565b91612db8565b9150915090565b50838316612e1a612e146000610ae5565b9161024f565b14612dd4565b612e2861201a565b50612e336000610ae5565b5b81612e48612e426000610ae5565b9161024f565b14612e7057612e59612e6a91611de0565b91612e6460016124da565b906124fa565b90612e34565b905090565b91612ea992949394612e85611c77565b50612e8e61201a565b50612e9761201a565b50612ea0610ed4565b50919091613029565b9391929093929193929193929190565b91612eed92949394612ec9611c77565b50612ed261201a565b50612edb61201a565b50612ee4610ed4565b50919091613029565b91929091929193929193929190565b90612f0561279b565b50612f118282906130f3565b600014612f1c575090565b905090565b612f2b60406100d1565b90565b90565b612f45612f40612f4a92612f2e565b611c82565b610293565b90565b90612f5790610293565b9052565b90565b60201b90565b612f78612f73612f7d92612f5b565b612f5e565b6102c0565b90565b90612f8a906102c0565b9052565b612f9661279b565b5060ff612fd1612fc860018060e01b03612fc3612fba612fb4612f21565b95612f31565b60008601612f4d565b612f64565b60208301612f80565b90565b612ffa612ff5612fef61300093612fe9610ed4565b50611a26565b93611a26565b611486565b91611486565b1490565b9061300d61279b565b50613019828290613123565b600014613024575090565b905090565b9091613033611c77565b5061303c61201a565b50613045610ed4565b5061304f826111ab565b61306261305c6000610ae5565b9161024f565b1480156130d0575b9081156130b3575b506130a057613085613097918390611218565b51916130916001610b04565b906111be565b91600091929190565b506130a9611c77565b9091600191929190565b90506130c86130c2849261024f565b9161024f565b101538613072565b50826130ec6130e66130e1856111ab565b61024f565b9161024f565b101561306a565b61311961311461310e61311f93613108610ed4565b50611a26565b93611a26565b611486565b91611486565b1090565b61314961314461313e61314f93613138610ed4565b50611a26565b93611a26565b611486565b91611486565b119056fea2646970667358221220674bdcc27ec55d5664feec2f564ff66bb8f2a9f5ae809a153df87c4cda476aaa64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_blobstreamX": "BlobstreamX contract where Celestia commitments are being stored",
          "_inputBox": "InputBox contract to send inputs to Cartesi DApps"
        }
      },
      "relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32,bytes)": {
        "details": "Called by clients to securely relay Celestia data to Cartesi DApps",
        "params": {
          "_dapp": "The address of the DApp",
          "_execLayerData": "Additional data to be interpreted by the execution layer",
          "_proof": "SharesProof object showing that a range of shares is committed to Celestia",
          "_root": "The Celestia \"dataRoot\" with the commitment for the block that contains the shares"
        },
        "returns": {
          "_0": "The hash of the input as returned by the Cartesi DApp's input box"
        }
      }
    },
    "title": "CelestiaRelay",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32,bytes)": {
        "notice": "Relay the specified Celestia shares as an input to a DApp's input box"
      }
    },
    "notice": "Relays Celestia blocks as inputs to Cartesi DApps",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2744,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "inputBox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IInputBox)49"
      },
      {
        "astId": 2747,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "blobstreamX",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDAOracle)87"
      }
    ],
    "types": {
      "t_contract(IDAOracle)87": {
        "encoding": "inplace",
        "label": "contract IDAOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IInputBox)49": {
        "encoding": "inplace",
        "label": "contract IInputBox",
        "numberOfBytes": "20"
      }
    }
  }
}